generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts Account[]
  sessions Session[]

  listings      Listing[]
  reviews       Review[]
  bookings      Booking[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  USER
  ADMIN
  HOST
}

model Listing {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  cover       String
  people      Int     @default(1)
  price       Float
  location    String
  isAvailable Boolean @default(true)
  isBanned    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  bookings Booking[]
  reviews  Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Booking {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  paymentDate DateTime @default(now())
  isPayed     Boolean  @default(false)

  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
